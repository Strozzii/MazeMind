"""
Handles the model prediction logic.

This module loads the trained machine learning model from disk and uses it
to predict a risk adjustment factor based on a company's feature set.
"""
from typing import Dict
import joblib
import numpy as np
from pathlib import Path

# --- Path Definition ---
# This robust pathing ensures the model can be found from anywhere.
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
MODEL_PATH = PROJECT_ROOT / "data" / "models" / "ariadne_model.joblib"

# --- Feature Order ---
# CRITICAL: The order of features must be the same as used in training.
# We define a canonical order here to ensure consistency.
FEATURE_ORDER = [
    "base_score",
    "finding_count",
    "critical_risk_count",
    "high_risk_count",
    "medium_risk_count",
    "low_risk_count",
    "average_score",
]

# Load the model once when the module is imported to avoid reloading on every call.
try:
    _model = joblib.load(MODEL_PATH)
except FileNotFoundError:
    _model = None
    print(f"Warning: Model file not found at {MODEL_PATH}. The prediction function will return 0.0.")


def predict_risk_adjustment(features: Dict[str, float]) -> float:
    """
    Predicts a risk adjustment factor using the trained model.

    Args:
        features: A dictionary of features generated by data_prep.py.

    Returns:
        A risk adjustment factor (probability of high risk) from 0.0 to 1.0.
    """
    if _model is None:
        return 0.0

    # 1. Prepare the input data in the correct order
    try:
        feature_values = [features[key] for key in FEATURE_ORDER]
    except KeyError as e:
        print(f"Error: Missing feature {e} in input dictionary.")
        return 0.0

    # Convert to a 2D numpy array, as scikit-learn expects
    input_data = np.array([feature_values])

    # 2. Make the prediction
    # .predict_proba() returns probabilities for [class_0, class_1]
    # We want the probability of class 1 (high risk).
    probabilities = _model.predict_proba(input_data)
    risk_adjustment = probabilities[0, 1]

    return risk_adjustment